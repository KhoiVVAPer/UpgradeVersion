/**
 * @fileoverview All the global configuration variables used in aplication are retuned
 * from this config file
 * @package
 */
import { Platform } from 'react-native';
import ApolloClient from 'apollo-boost/lib/index';
import Config from 'react-native-config';
import RNFetchBlob from 'rn-fetch-blob';
import { InMemoryCache } from 'apollo-cache-inmemory/lib/index';
import translation from '../../assets/data/translation';

//* Application global variables */
const LIVE = true;
const DB_VERSION = 6;
const SERVER_URL = Config.GRAPHQL_API_URL;
const APP_FOLDER = 'AK_DCA';

/**
 * Global application data
 */
const INITIAL_APP_DATA = {
  userToken: '',
  dbBaseUrl: '',
  activeLanguageData: {},
  activeComponentId: 0,
  rootNav: { title: '', componentId: '' },
  catalogueIds: { HOME_AND_GARDEN: '', PROFESSIONAL: '' },
  catalogueNames: { HOME_AND_GARDEN: '', PROFESSIONAL: '' },
  catalogueSwitch: {},
  checkParent: false,
  showConfiguring: false,
  blockOnboarding: false,
  isNetConnected: false,
  isDownloadingStarted: false,
  isDownloadingCanceled: false,
  isDownloadingWaiting: false,
  isSyncWaiting: false,
  totalMediaCount: 0,
  powerSaverFlag: {},
  structureData: [],
  isOnBoardingPlaying: false,
  tempOnboardingStep: 0,
  translationsArr: translation,
  offlineDbApi: null,
  hgImgUrlsApi: null,
  proImgUrlsApi: null,
  killOfflineDownload: false,
  dbDownloadTask: null,
  mediaDownloadTask: null,
  mediaUnzipingArr: [],
  favouriteModalRef: null,
  headerRef: null,
  breadCrumbRef: null,
  highligherRef: null,
  dowloadModalRef: null,
  pageLoaderRef: null,
  rootPageRef: null,
  alertRef: null
};
const appData = { ...INITIAL_APP_DATA };

/**
 * Instantiate Graphql appllo client
 * @param {string} authorizer is a token generated by aws cognito service
 * @param {string} url is api url
 */
const GET_CLIENT = (authorizer, url = '') => new ApolloClient({
  uri: `${SERVER_URL}/${url}`,
  cache: new InMemoryCache({
    dataIdFromObject: () => Math.random(),
    addTypename: false
  }),
  // defaultOptions: clientOptions,
  headers: {
    Authorizer: authorizer
  }
});

/**
 * Set data in key for object globally
 * @param {string} prop is key in appData variable
 * @param {any} value is value of key
 */
const SET_APP_DATA = (prop, value) => { appData[prop] = value; };

/**
 * Set data in key for object globally in asynchronous way
 * @param {string} prop is key in appData variable
 * @param {any} value is value of key
 */
const SET_APP_DATA_ASYNC = (prop, value) => new Promise((resolve) => {
  appData[prop] = value;
  resolve(true);
});

/**
 * Get data in key for object globally
 * @param {string} prop is key in appData variable
 */
const GET_APP_DATA = (prop) => appData[prop];

/**
 * Get data in key for object globally in asynchronous way
 * @param {string} prop is key in appData variable
 */
const GET_APP_DATA_ASYNC = (prop) => new Promise((resolve) => {
  resolve(appData[prop]);
});

/**
 * Get data in key for object globally in asynchronous way
 * @param {string} prop is key in appData variable
 */
const GET_APP_DATA_COMPLETE = () => appData;

/**
 * Restore app data to initial state
 */
const RESET_APP_DATA = () => new Promise((resolve) => {
  const keyToExclude = ['rootPageRef', 'userToken', 'dbBaseUrl'];
  // eslint-disable-next-line no-restricted-syntax, guard-for-in, prefer-const, no-unused-vars
  for (let key in INITIAL_APP_DATA) {
    if (!keyToExclude.includes(key)) {
      appData[key] = INITIAL_APP_DATA[key];
    }
  }
  resolve();
});

const { dirs } = RNFetchBlob.fs;
const CURRENT_YEAR = new Date().getFullYear() + 1;
const DB_BASE_URL = Platform.OS === 'android' ? '' : `${dirs.DocumentDir}/${APP_FOLDER}/`;
const IMAGE_SAVE_LOCATION = Platform.OS === 'ios' ? `${dirs.DocumentDir}/${APP_FOLDER}/images` : `${dirs.DocumentDir}/${APP_FOLDER}/images`;
const IMAGE_ZIP_LOCATION = Platform.OS === 'ios' ? `${dirs.DocumentDir}/${APP_FOLDER}/images/images.zip` : `${dirs.DocumentDir}/${APP_FOLDER}/images/images.zip`;
const DOCUMENT_SAVE_LOCATION = Platform.OS === 'ios' ? `${dirs.DocumentDir}/${APP_FOLDER}` : `${dirs.DownloadDir}/${APP_FOLDER}`;
const DOCUMENT_DIR = Platform.OS === 'ios' ? `${dirs.DocumentDir}/${APP_FOLDER}/` : `${dirs.DocumentDir}/`;

const VIBRATE_DURATION = 200;

export {
  LIVE,
  SERVER_URL,
  GET_CLIENT,
  SET_APP_DATA,
  GET_APP_DATA,
  SET_APP_DATA_ASYNC,
  GET_APP_DATA_ASYNC,
  GET_APP_DATA_COMPLETE,
  RESET_APP_DATA,
  CURRENT_YEAR,
  DB_BASE_URL,
  IMAGE_SAVE_LOCATION,
  IMAGE_ZIP_LOCATION,
  DOCUMENT_SAVE_LOCATION,
  DOCUMENT_DIR,
  VIBRATE_DURATION,
  DB_VERSION,
  APP_FOLDER
};
